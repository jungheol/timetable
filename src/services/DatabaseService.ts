import * as SQLite from 'expo-sqlite';
import moment from 'moment';

export interface Schedule {
  id: number;
  name: string;
  start_time: string;
  end_time: string;
  show_weekend: boolean;
  is_active: boolean;
  time_unit?: '30min' | '1hour';
  created_at?: string;
  updated_at?: string;
  del_yn?: boolean;
}

export interface Event {
  id: number;
  schedule_id: number;
  title: string;
  start_time: string;
  end_time: string;
  event_date?: string;
  category: 'ÌïôÍµê/Í∏∞Í¥Ä' | 'ÌïôÏõê' | 'Í≥µÎ∂Ä' | 'Ìú¥Ïãù' | 'ÏÑ†ÌÉùÏïàÌï®';
  academy_id?: number;
  is_recurring: boolean;
  recurring_group_id?: number;
  created_at?: string;
  updated_at?: string;
  del_yn?: boolean;
}

export interface Academy {
  id: number;
  name: string;
  subject: 'Íµ≠Ïñ¥' | 'ÏàòÌïô' | 'ÏòÅÏñ¥' | 'ÏòàÏ≤¥Îä•' | 'ÏÇ¨ÌöåÍ≥ºÌïô' | 'Í∏∞ÌÉÄ';
  monthly_fee?: number;
  payment_cycle?: number;
  payment_method?: 'Ïπ¥Îìú' | 'Ïù¥Ï≤¥';
  payment_day?: number;
  payment_institution?: string;
  payment_account?: string;
  textbook_fee?: number;
  textbook_bank?: string;
  textbook_account?: string;
  start_month?: string;
  end_month?: string;
  status: 'ÏßÑÌñâ' | 'Ï§ëÎã®';
  provides_vehicle?: boolean;
  note?: string;
  created_at?: string;
  updated_at?: string;
  del_yn?: boolean;
}

export interface RecurringPattern {
  id: number;
  monday: boolean;
  tuesday: boolean;
  wednesday: boolean;
  thursday: boolean;
  friday: boolean;
  saturday: boolean;
  sunday: boolean;
  start_date: string;
  end_date?: string;
  created_at?: string;
  del_yn?: boolean;
}

class DatabaseService {
  private db: SQLite.SQLiteDatabase | null = null;

  // üîß Í∞úÎ∞ú Î™®Îìú ÏÑ§Ï†ï
  private DEVELOPMENT_MODE = true;

  constructor() {
    this.initDatabase();
  }

  private async initDatabase() {
    try {
      this.db = await SQLite.openDatabaseAsync('student_schedule.db');

      // üîß Í∞úÎ∞ú Î™®ÎìúÏùº Îïå Î™®Îì† ÌÖåÏù¥Î∏î ÏÇ≠Ï†ú ÌõÑ Ïû¨ÏÉùÏÑ±
      if (this.DEVELOPMENT_MODE) {
        console.log('üîß Development mode: Dropping all tables...');
        await this.db.execAsync(`DROP TABLE IF EXISTS events;`);
        await this.db.execAsync(`DROP TABLE IF EXISTS academies;`);
        await this.db.execAsync(`DROP TABLE IF EXISTS recurring_patterns;`);
        await this.db.execAsync(`DROP TABLE IF EXISTS schedules;`);
        console.log('‚úÖ All tables dropped');
      }
      
      // ÏùºÏ†ïÌëú ÌÖåÏù¥Î∏î
      await this.db.execAsync(`
        CREATE TABLE IF NOT EXISTS schedules (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          start_time TEXT NOT NULL,
          end_time TEXT NOT NULL,
          show_weekend BOOLEAN DEFAULT FALSE,
          is_active BOOLEAN DEFAULT TRUE,
          time_unit TEXT DEFAULT '1hour',
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          del_yn BOOLEAN DEFAULT FALSE
        );
      `);

      // Î∞òÎ≥µ Ìå®ÌÑ¥ ÌÖåÏù¥Î∏î
      await this.db.execAsync(`
        CREATE TABLE IF NOT EXISTS recurring_patterns (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          monday BOOLEAN DEFAULT FALSE,
          tuesday BOOLEAN DEFAULT FALSE,
          wednesday BOOLEAN DEFAULT FALSE,
          thursday BOOLEAN DEFAULT FALSE,
          friday BOOLEAN DEFAULT FALSE,
          saturday BOOLEAN DEFAULT FALSE,
          sunday BOOLEAN DEFAULT FALSE,
          start_date TEXT NOT NULL,
          end_date TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          del_yn BOOLEAN DEFAULT FALSE
        );
      `);

      // ÌïôÏõê ÌÖåÏù¥Î∏î
      await this.db.execAsync(`
        CREATE TABLE IF NOT EXISTS academies (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          subject TEXT CHECK(subject IN ('Íµ≠Ïñ¥', 'ÏàòÌïô', 'ÏòÅÏñ¥', 'ÏòàÏ≤¥Îä•', 'ÏÇ¨ÌöåÍ≥ºÌïô', 'Í∏∞ÌÉÄ')),
          monthly_fee INTEGER,
          payment_cycle INTEGER DEFAULT 1,
          payment_method TEXT CHECK(payment_method IN ('Ïπ¥Îìú', 'Ïù¥Ï≤¥')),
          payment_day INTEGER,
          payment_institution TEXT,
          payment_account TEXT,
          textbook_fee INTEGER,
          textbook_bank TEXT,
          textbook_account TEXT,
          start_month TEXT,
          end_month TEXT,
          status TEXT CHECK(status IN ('ÏßÑÌñâ', 'Ï§ëÎã®')) DEFAULT 'ÏßÑÌñâ',
          provides_vehicle BOOLEAN DEFAULT FALSE,
          note TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          del_yn BOOLEAN DEFAULT FALSE
        );
      `);

      // ÏùºÏ†ï ÌÖåÏù¥Î∏î
      await this.db.execAsync(`
        CREATE TABLE IF NOT EXISTS events (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          schedule_id INTEGER NOT NULL,
          title TEXT NOT NULL,
          start_time TEXT NOT NULL,
          end_time TEXT NOT NULL,
          event_date TEXT,
          category TEXT CHECK(category IN ('ÌïôÍµê/Í∏∞Í¥Ä', 'ÌïôÏõê', 'Í≥µÎ∂Ä', 'Ìú¥Ïãù', 'ÏÑ†ÌÉùÏïàÌï®')),
          academy_id INTEGER,
          is_recurring BOOLEAN DEFAULT FALSE,
          recurring_group_id INTEGER,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          del_yn BOOLEAN DEFAULT FALSE,
          FOREIGN KEY (schedule_id) REFERENCES schedules(id),
          FOREIGN KEY (academy_id) REFERENCES academies(id),
          FOREIGN KEY (recurring_group_id) REFERENCES recurring_patterns(id)
        );
      `);

      // Ïù∏Îç±Ïä§ ÏÉùÏÑ±
      await this.db.execAsync(`
        CREATE INDEX IF NOT EXISTS idx_events_schedule_date 
        ON events(schedule_id, event_date) WHERE del_yn = FALSE;
      `);

      await this.db.execAsync(`
        CREATE INDEX IF NOT EXISTS idx_events_academy 
        ON events(academy_id) WHERE del_yn = FALSE;
      `);

    } catch (error) {
      console.error('Database initialization error:', error);
    }
  }

  private async ensureDbConnection(): Promise<SQLite.SQLiteDatabase> {
    if (!this.db) {
      await this.initDatabase();
    }
    if (!this.db) {
      throw new Error('Database connection failed');
    }
    return this.db;
  }

  // ÏùºÏ†ïÌëú Í¥ÄÎ¶¨
  async getActiveSchedule(): Promise<Schedule | null> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.getFirstAsync<Schedule>(
        'SELECT * FROM schedules WHERE is_active = 1 AND del_yn = 0 LIMIT 1'
      );
      return result || null;
    } catch (error) {
      console.error('Error getting active schedule:', error);
      throw error;
    }
  }

  async createSchedule(schedule: Omit<Schedule, 'id' | 'created_at' | 'updated_at'>): Promise<number> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.runAsync(
        `INSERT INTO schedules (
          name, start_time, end_time, show_weekend, is_active, time_unit, del_yn
        ) VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [
          schedule.name,
          schedule.start_time,
          schedule.end_time,
          schedule.show_weekend ? 1 : 0,
          schedule.is_active ? 1 : 0,
          schedule.time_unit || '1hour',
          schedule.del_yn ? 1 : 0
        ]
      );
      return result.lastInsertRowId;
    } catch (error) {
      console.error('Error creating schedule:', error);
      throw error;
    }
  }

  async updateSchedule(schedule: Schedule): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      await db.runAsync(
        `UPDATE schedules SET 
         name = ?, start_time = ?, end_time = ?, show_weekend = ?, 
         time_unit = ?, updated_at = CURRENT_TIMESTAMP
         WHERE id = ?`,
        [
          schedule.name, 
          schedule.start_time, 
          schedule.end_time, 
          schedule.show_weekend ? 1 : 0,
          schedule.time_unit || '1hour',
          schedule.id
        ]
      );
    } catch (error) {
      console.error('Error updating schedule:', error);
      throw error;
    }
  }

  // ÌïôÏõê Í¥ÄÎ¶¨
  async getAcademies(): Promise<Academy[]> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.getAllAsync<Academy>(
        'SELECT * FROM academies WHERE del_yn = 0 ORDER BY created_at DESC'
      );
      return result;
    } catch (error) {
      console.error('Error getting academies:', error);
      throw error;
    }
  }

  async createAcademy(academy: Omit<Academy, 'id' | 'created_at' | 'updated_at'>): Promise<number> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.runAsync(
        `INSERT INTO academies (
          name, subject, monthly_fee, payment_cycle, payment_method, 
          payment_day, payment_institution, payment_account, textbook_fee, 
          textbook_bank, textbook_account, start_month, end_month, 
          status, provides_vehicle, note
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          academy.name, 
          academy.subject, 
          academy.monthly_fee ?? null, 
          academy.payment_cycle ?? null,
          academy.payment_method ?? null, 
          academy.payment_day ?? null, 
          academy.payment_institution ?? null,
          academy.payment_account ?? null, 
          academy.textbook_fee ?? null, 
          academy.textbook_bank ?? null,
          academy.textbook_account ?? null, 
          academy.start_month ?? null, 
          academy.end_month ?? null,
          academy.status, 
          academy.provides_vehicle ? 1 : 0, 
          academy.note ?? null
        ]
      );
      return result.lastInsertRowId;
    } catch (error) {
      console.error('Error creating academy:', error);
      throw error;
    }
  }

  async updateAcademy(academy: Academy): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      await db.runAsync(
        `UPDATE academies SET 
         name = ?, subject = ?, monthly_fee = ?, payment_cycle = ?,
         payment_method = ?, payment_day = ?, payment_institution = ?,
         payment_account = ?, textbook_fee = ?, textbook_bank = ?,
         textbook_account = ?, start_month = ?, end_month = ?,
         status = ?, provides_vehicle = ?, note = ?,
         updated_at = CURRENT_TIMESTAMP
         WHERE id = ?`,
        [
          academy.name, 
          academy.subject, 
          academy.monthly_fee ?? null, 
          academy.payment_cycle ?? null,
          academy.payment_method ?? null, 
          academy.payment_day ?? null, 
          academy.payment_institution ?? null,
          academy.payment_account ?? null, 
          academy.textbook_fee ?? null, 
          academy.textbook_bank ?? null,
          academy.textbook_account ?? null, 
          academy.start_month ?? null, 
          academy.end_month ?? null,
          academy.status, 
          academy.provides_vehicle ? 1 : 0, 
          academy.note ?? null, 
          academy.id
        ]
      );
    } catch (error) {
      console.error('Error updating academy:', error);
      throw error;
    }
  }

  async deleteAcademy(id: number): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      await db.runAsync('UPDATE academies SET del_yn = 1 WHERE id = ?', [id]);
    } catch (error) {
      console.error('Error deleting academy:', error);
      throw error;
    }
  }

  // ÏùºÏ†ï Í¥ÄÎ¶¨
  async getEvents(scheduleId: number, startDate: string, endDate: string): Promise<Event[]> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.getAllAsync<Event>(
        `SELECT e.*, a.name as academy_name, a.subject as academy_subject
         FROM events e
         LEFT JOIN academies a ON e.academy_id = a.id
         WHERE e.schedule_id = ? AND e.del_yn = 0
         AND ((e.is_recurring = 0 AND e.event_date BETWEEN ? AND ?)
              OR (e.is_recurring = 1))
         ORDER BY e.start_time`,
        [scheduleId, startDate, endDate]
      );
      return result;
    } catch (error) {
      console.error('Error getting events:', error);
      throw error;
    }
  }

  async createEvent(event: Omit<Event, 'id' | 'created_at' | 'updated_at'>): Promise<number> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.runAsync(
        `INSERT INTO events (
          schedule_id, title, start_time, end_time, event_date,
          category, academy_id, is_recurring, recurring_group_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          event.schedule_id, 
          event.title, 
          event.start_time, 
          event.end_time,
          event.event_date ?? null, 
          event.category, 
          event.academy_id ?? null,
          event.is_recurring ? 1 : 0, 
          event.recurring_group_id ?? null
        ]
      );
      return result.lastInsertRowId;
    } catch (error) {
      console.error('Error creating event:', error);
      throw error;
    }
  }

  async updateEvent(event: Event): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      await db.runAsync(
        `UPDATE events SET 
         title = ?, start_time = ?, end_time = ?, event_date = ?,
         category = ?, academy_id = ?, updated_at = CURRENT_TIMESTAMP
         WHERE id = ?`,
        [
          event.title, 
          event.start_time, 
          event.end_time, 
          event.event_date ?? null,
          event.category, 
          event.academy_id ?? null, 
          event.id
        ]
      );
    } catch (error) {
      console.error('Error updating event:', error);
      throw error;
    }
  }

  async deleteEvent(id: number): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      await db.runAsync('UPDATE events SET del_yn = 1 WHERE id = ?', [id]);
    } catch (error) {
      console.error('Error deleting event:', error);
      throw error;
    }
  }

  // Îã§Ï§ë ÏöîÏùº ÏùºÏ†ï ÏÉùÏÑ± (Î∞òÎ≥µ ÏóÜÏùå)
  async createMultiDayEvents(
    eventData: Omit<Event, 'id' | 'created_at' | 'updated_at' | 'event_date'>,
    selectedDays: string[],
    baseDate: string
  ): Promise<number[]> {
    try {
      const db = await this.ensureDbConnection();
      const eventIds: number[] = [];
      
      // ÏÑ†ÌÉùÎêú ÏöîÏùºÎì§Ïóê ÎåÄÌï¥ Í∞ÅÍ∞Å Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
      for (const dayKey of selectedDays) {
        const eventDate = this.getNextDateForDay(baseDate, dayKey);
        
        const result = await db.runAsync(
          `INSERT INTO events (
            schedule_id, title, start_time, end_time, event_date,
            category, academy_id, is_recurring, recurring_group_id
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            eventData.schedule_id,
            eventData.title,
            eventData.start_time,
            eventData.end_time,
            eventDate,
            eventData.category,
            eventData.academy_id ?? null,
            false, // Îã§Ï§ë ÏöîÏùºÏù¥ÏßÄÎßå Î∞òÎ≥µÏùÄ ÏïÑÎãò
            null
          ]
        );
        
        eventIds.push(result.lastInsertRowId);
      }
      
      return eventIds;
    } catch (error) {
      console.error('Error creating multi-day events:', error);
      throw error;
    }
  }

  // ÏöîÏùº ÌÇ§Î•º Í∏∞Î∞òÏúºÎ°ú Îã§Ïùå Ìï¥Îãπ ÏöîÏùºÏùò ÎÇ†Ïßú Í≥ÑÏÇ∞
  private getNextDateForDay(baseDate: string, dayKey: string): string {
    const dayMap = {
      'sunday': 0,
      'monday': 1,
      'tuesday': 2,
      'wednesday': 3,
      'thursday': 4,
      'friday': 5,
      'saturday': 6
    };
    
    const targetDay = dayMap[dayKey as keyof typeof dayMap];
    const base = moment(baseDate);
    const currentDay = base.day();
    
    // ÌòÑÏû¨ Ï£ºÏóêÏÑú Ìï¥Îãπ ÏöîÏùºÍπåÏßÄÏùò Ï∞®Ïù¥ Í≥ÑÏÇ∞
    let daysToAdd = targetDay - currentDay;
    if (daysToAdd < 0) {
      daysToAdd += 7; // Îã§Ïùå Ï£ºÏùò Ìï¥Îãπ ÏöîÏùº
    }
    
    return base.add(daysToAdd, 'days').format('YYYY-MM-DD');
  }

  // Î∞òÎ≥µ ÏùºÏ†ïÍ≥º Ïó∞Í≤∞Îêú ÌïôÏõê Ï†ïÎ≥¥ Ï†ÄÏû• (ÌïôÏõê Ïπ¥ÌÖåÍ≥†Î¶¨Ïù∏ Í≤ΩÏö∞)
  async createAcademyForRecurringEvent(
    academyName: string,
    subject: Academy['subject']
  ): Promise<number> {
    try {
      const db = await this.ensureDbConnection();
      
      // ÎèôÏùºÌïú Ïù¥Î¶ÑÍ≥º Í≥ºÎ™©Ïùò ÌïôÏõêÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
      const existingAcademy = await db.getFirstAsync<Academy>(
        'SELECT * FROM academies WHERE name = ? AND subject = ? AND del_yn = 0',
        [academyName, subject]
      );
      
      if (existingAcademy) {
        return existingAcademy.id;
      }
      
      // ÏÉà ÌïôÏõê ÏÉùÏÑ±
      const result = await db.runAsync(
        `INSERT INTO academies (name, subject, status) VALUES (?, ?, ?)`,
        [academyName, subject, 'ÏßÑÌñâ']
      );
      
      return result.lastInsertRowId;
    } catch (error) {
      console.error('Error creating academy for recurring event:', error);
      throw error;
    }
  }

  // Í∞úÏÑ†Îêú Ïù¥Î≤§Ìä∏ Ï°∞Ìöå (Î∞òÎ≥µ ÏùºÏ†ï ÌôïÏû• Ìè¨Ìï®)
  async getEventsWithRecurring(
    scheduleId: number, 
    startDate: string, 
    endDate: string
  ): Promise<Event[]> {
    try {
      const db = await this.ensureDbConnection();
      
      // 1. ÏùºÎ∞ò ÏùºÏ†ï Ï°∞Ìöå
      const regularEvents = await db.getAllAsync<Event>(
        `SELECT e.*, a.name as academy_name, a.subject as academy_subject
        FROM events e
        LEFT JOIN academies a ON e.academy_id = a.id
        WHERE e.schedule_id = ? AND e.del_yn = 0 AND e.is_recurring = 0
        AND e.event_date BETWEEN ? AND ?
        ORDER BY e.start_time`,
        [scheduleId, startDate, endDate]
      );
      
      // 2. Î∞òÎ≥µ ÏùºÏ†ï Ï°∞Ìöå Î∞è ÌôïÏû•
      const recurringEvents = await db.getAllAsync<any>(
        `SELECT e.*, a.name as academy_name, a.subject as academy_subject, rp.*
        FROM events e
        LEFT JOIN academies a ON e.academy_id = a.id
        LEFT JOIN recurring_patterns rp ON e.recurring_group_id = rp.id
        WHERE e.schedule_id = ? AND e.del_yn = 0 AND e.is_recurring = 1
        AND rp.del_yn = 0
        AND rp.start_date <= ?
        AND (rp.end_date IS NULL OR rp.end_date >= ?)`,
        [scheduleId, endDate, startDate]
      );
      
      // 3. Î∞òÎ≥µ ÏùºÏ†ïÏùÑ ÎÇ†ÏßúÎ≥ÑÎ°ú ÌôïÏû•
      const expandedRecurringEvents: Event[] = [];
      for (const recurringEvent of recurringEvents) {
        const dates = this.generateRecurringDates(recurringEvent, startDate, endDate);
        for (const date of dates) {
          expandedRecurringEvents.push({
            ...recurringEvent,
            event_date: date,
            id: `${recurringEvent.id}_${date}` as any, // ÏûÑÏãú ID
          });
        }
      }
      
      return [...regularEvents, ...expandedRecurringEvents];
    } catch (error) {
      console.error('Error getting events with recurring:', error);
      throw error;
    }
  }

  // Î∞òÎ≥µ ÏùºÏ†ïÏùò ÎÇ†ÏßúÎì§ ÏÉùÏÑ±
  private generateRecurringDates(
    recurringEvent: any,
    startDate: string,
    endDate: string
  ): string[] {
    const dates: string[] = [];
    const start = moment(startDate);
    const end = moment(endDate);
    const patternStart = moment(recurringEvent.start_date);
    const patternEnd = recurringEvent.end_date ? moment(recurringEvent.end_date) : null;
    
    // ÏãúÏûëÏùºÏùÑ Ï°∞Ï†ï (Ìå®ÌÑ¥ ÏãúÏûëÏùº Ïù¥ÌõÑÎ∂ÄÌÑ∞)
    let current = moment.max(start, patternStart);
    
    while (current.isSameOrBefore(end)) {
      const dayOfWeek = current.day();
      let shouldInclude = false;
      
      // ÏöîÏùº ÌôïÏù∏
      switch (dayOfWeek) {
        case 0: shouldInclude = recurringEvent.sunday; break;
        case 1: shouldInclude = recurringEvent.monday; break;
        case 2: shouldInclude = recurringEvent.tuesday; break;
        case 3: shouldInclude = recurringEvent.wednesday; break;
        case 4: shouldInclude = recurringEvent.thursday; break;
        case 5: shouldInclude = recurringEvent.friday; break;
        case 6: shouldInclude = recurringEvent.saturday; break;
      }
      
      // Ìå®ÌÑ¥ Ï¢ÖÎ£åÏùº ÌôïÏù∏
      if (patternEnd && current.isAfter(patternEnd)) {
        shouldInclude = false;
      }
      
      if (shouldInclude) {
        dates.push(current.format('YYYY-MM-DD'));
      }
      
      current.add(1, 'day');
    }
    
    return dates;
  }

  // Î∞òÎ≥µ Ìå®ÌÑ¥ ÏóÖÎç∞Ïù¥Ìä∏
  async updateRecurringPattern(pattern: RecurringPattern): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      await db.runAsync(
        `UPDATE recurring_patterns SET 
        monday = ?, tuesday = ?, wednesday = ?, thursday = ?,
        friday = ?, saturday = ?, sunday = ?,
        start_date = ?, end_date = ?, updated_at = CURRENT_TIMESTAMP
        WHERE id = ?`,
        [
          pattern.monday ? 1 : 0,
          pattern.tuesday ? 1 : 0,
          pattern.wednesday ? 1 : 0,
          pattern.thursday ? 1 : 0,
          pattern.friday ? 1 : 0,
          pattern.saturday ? 1 : 0,
          pattern.sunday ? 1 : 0,
          pattern.start_date,
          pattern.end_date ?? null,
          pattern.id
        ]
      );
    } catch (error) {
      console.error('Error updating recurring pattern:', error);
      throw error;
    }
  }

  // Î∞òÎ≥µ ÏùºÏ†ï ÏÇ≠Ï†ú (Ìå®ÌÑ¥Í≥º Ïó∞Í≤∞Îêú Î™®Îì† Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú)
  async deleteRecurringEvent(eventId: number): Promise<void> {
    try {
      const db = await this.ensureDbConnection();
      
      // Ïù¥Î≤§Ìä∏ Ï†ïÎ≥¥ Ï°∞Ìöå
      const event = await db.getFirstAsync<Event>(
        'SELECT * FROM events WHERE id = ? AND del_yn = 0',
        [eventId]
      );
      
      if (!event) {
        throw new Error('Event not found');
      }
      
      if (event.is_recurring && event.recurring_group_id) {
        // Î∞òÎ≥µ Ìå®ÌÑ¥ ÏÇ≠Ï†ú
        await db.runAsync(
          'UPDATE recurring_patterns SET del_yn = 1 WHERE id = ?',
          [event.recurring_group_id]
        );
        
        // Ïó∞Í≤∞Îêú Î™®Îì† Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
        await db.runAsync(
          'UPDATE events SET del_yn = 1 WHERE recurring_group_id = ?',
          [event.recurring_group_id]
        );
      } else {
        // Îã®Ïùº Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
        await db.runAsync('UPDATE events SET del_yn = 1 WHERE id = ?', [eventId]);
      }
    } catch (error) {
      console.error('Error deleting recurring event:', error);
      throw error;
    }
  }

  // Î∞òÎ≥µ Ìå®ÌÑ¥ Í¥ÄÎ¶¨
  async createRecurringPattern(pattern: Omit<RecurringPattern, 'id' | 'created_at'>): Promise<number> {
    try {
      const db = await this.ensureDbConnection();
      const result = await db.runAsync(
        `INSERT INTO recurring_patterns (
          monday, tuesday, wednesday, thursday, friday, saturday, sunday,
          start_date, end_date
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          pattern.monday ? 1 : 0, 
          pattern.tuesday ? 1 : 0, 
          pattern.wednesday ? 1 : 0, 
          pattern.thursday ? 1 : 0, 
          pattern.friday ? 1 : 0, 
          pattern.saturday ? 1 : 0, 
          pattern.sunday ? 1 : 0, 
          pattern.start_date, 
          pattern.end_date ?? null
        ]
      );
      return result.lastInsertRowId;
    } catch (error) {
      console.error('Error creating recurring pattern:', error);
      throw error;
    }
  }
}

export default new DatabaseService();